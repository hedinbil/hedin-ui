<HUINavMenuHorizontal Items="_menuItems" RequireAuthorization="false" @ref="_menuRef" ActiveItem="_activeMenuItem"/>
<HUIPage Header="Demo page 2" PageDescription="Here we use the horizontal menu with badges and icons">
    Some content.
    <span>
        <HUIButton Variant="Variant.Outlined" OnClick="@AddBadgeAndIconsToMenu">Refresh menu</HUIButton>
    </span>
</HUIPage>
@code {

    [CascadingParameter] public string Tab { get; set; } = string.Empty;
    private readonly List<HUIMenuItem> _menuItems =
    [
        new("Settings", "/components/menus/nav-menu-horizontal/tab11", "", tooltip: "Settings for all pages"),
        new("Menu option 2", "/components/menus/nav-menu-horizontal/tab12", "", icon: @Icons.Material.Filled.Dangerous, dot: Severity.Error),
        new("Menu option 3", "/components/menus/nav-menu-horizontal/tab13", "", badgeData: "3", badgeColor: Color.Primary)
    ];

    private HUIMenuItem? _activeMenuItem;
    protected override void OnInitialized()
    {
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _activeMenuItem = _menuItems.FirstOrDefault(x => x.Url.TrimEnd('/').EndsWith($"/{Tab}"));
    }

    private HUINavMenuHorizontal? _menuRef;
    private void AddBadgeAndIconsToMenu(MouseEventArgs obj)
    {
        _menuItems[0].BadgeData = "!";
        _menuItems[0].Dot = Severity.Warning;
        _menuItems[0].Icon = @Icons.Material.Filled.Settings;
        _menuRef?.ForceStateHasChanged();
    }
}
