@using System.Text.RegularExpressions
@using System.Reflection
@using System.Web
@using Microsoft.Extensions.DependencyInjection
@using System.Globalization
@using MudBlazor.Docs.Extensions


<MudLink OnClick="()=> IsVisible = !IsVisible" Color="Color.Secondary">@(IsVisible ? "-" : "+") @Type!.Name</MudLink>

@if (IsVisible)
{
    // save as lists to speed up displaying the page
    var properties = getProperties().ToList();
    var methods = getMethods().ToList();
    var eventCallbacks = getEventCallbacks().ToList();

@if (properties.Count > 0)
{
    <HUIModule Header="Properties" IsExpanded="true">
        <HUIDataGrid Items="properties" T="ApiProperty" ShowPager="false" Dense="true" Groupable="true">
            <Columns>
                <TemplateColumn T="ApiProperty" Title="Name">
                    <CellTemplate>
                        @context.Item.Name
                        @if (_propertiesGrouping == Grouping.Inheritance && IsOverridden(context.Item.PropertyInfo!))
                        {
                            <MudChip Variant="Variant.Outlined" Color="Color.Secondary" Size="Size.Small">overridden</MudChip>
                        }
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn T="ApiProperty" Title="Type">
                    <CellTemplate>
                        <div style="display: inline-flex; flex-direction: row; align-items: center; white-space: nowrap;">
                            <Hedin.UI.Demo.Shared.ApiDocs.ApiDocsTypeInfo Type="@context.Item.Type" />
                            @if (context.Item.IsTwoWay)
                            {
                                <HUITooltip Text="Binding TwoWay">
                                    <MudIcon Icon="@Icons.Material.Filled.SyncAlt" Color="Color.Default" Class="ml-2 mt-2" />
                                </HUITooltip>
                            }
                        </div>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn T="ApiProperty" Title="Default">
                    <CellTemplate>
                        @{
                            var def = PresentDefaultValue(context.Item.Default!);
                        }
                        @if (def.Contains("<path"))
                        {
                            <MudIcon Icon="@def.Substring(1, def.Length - 1)" />
                        }
                        else
                        {
                            @def
                        }
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn T="ApiProperty" Title="Description">
                    <CellTemplate>
                        @(HttpUtility.HtmlDecode(context.Item.Description))
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </HUIDataGrid>
    </HUIModule>

}

@if (eventCallbacks.Any())
{
    <HUIModule Header="EventCallbacks" Class="my-12" IsExpanded="true">
        <HUIDataGrid Items="eventCallbacks" T="ApiProperty" ShowPager="false" Dense="true" Groupable="true">
            <Columns>
                <PropertyColumn T="ApiProperty" TProperty="string" Property="x => x.Name" Title="Name" />
                <TemplateColumn T="ApiProperty" Title="Type">
                    <CellTemplate>
                        @context.Item.Type?.GetTypeDisplayName()
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn T="ApiProperty" Title="Description">
                    <CellTemplate>
                        @(HttpUtility.HtmlDecode(context.Item.Description))
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </HUIDataGrid>
    </HUIModule>
}

@if (methods.Any())
{
    <HUIModule Header="Methods" IsExpanded="true" Class="mb-12">
        <HUIDataGrid Items="methods" T="ApiMethod" ShowPager="false" Dense="true" Groupable="true">
            <Columns>
                <PropertyColumn T="ApiMethod" TProperty="string" Property="x => x.Signature" Title="Name" />
                <TemplateColumn T="ApiMethod" Title="Parameters">
                    <CellTemplate>
                                     @if (context.Item.Parameters != null)
                    {
                            foreach (var parameterInfo in context.Item.Parameters)
                        {
                                <div style="display: flex; flex-direction: row; align-items: center; white-space: nowrap;">@($"{parameterInfo.ParameterType.GetTypeDisplayName()} {parameterInfo.Name}{AnalyseMethodDocumentation(context.Item.Documentation, "param", parameterInfo.Name!)}")</div>
                        }
                    }
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn T="ApiMethod" Title="Return">
                    <CellTemplate>
                        @if (@context.Item.Return != null && context.Item.Return.ParameterType.GetTypeDisplayName() != "void")
                    {
                            <div style="display: flex; flex-direction: row; align-items: center; white-space: nowrap;">@($"{context.Item.Return.ParameterType.GetTypeDisplayName()}{AnalyseMethodDocumentation(context.Item.Documentation, "returns")}")</div>
                    }
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn T="ApiMethod" Title="Description">
                    <CellTemplate>
                        @(HttpUtility.HtmlDecode(AnalyseMethodDocumentation(context.Item.Documentation, "summary")))
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </HUIDataGrid>
    </HUIModule>
}
<div style="display: none;">
    @RenderTheType()
</div>
}

@code {
    private List<string> hiddenMethods = new List<string>()
    {
        "ToString",
        "GetType",
        "GetHashCode",
        "Equals",
        "SetParametersAsync",
        "ReferenceEquals"
    };
    [Parameter, EditorRequired] public Type? Type { get; set; }
    [Parameter] public bool IsVisible { get; set; }

    private IEnumerable<ApiProperty> getEventCallbacks()
    {
        string saveTypename = DocStrings.GetSaveTypename(Type!);

        foreach (var info in Type!.GetPropertyInfosWithAttribute<ParameterAttribute>().OrderBy(x => x.Name))
        {
            if (info.GetCustomAttributes(typeof(System.ObsoleteAttribute), true).Length == 0 && info.PropertyType.Name.Contains("EventCallback"))
            {
                yield return new ApiProperty()
                    {
                        Name = info.Name,
                        PropertyInfo = info,
                        Default = string.Empty,
                        Description = DocStrings.GetMemberDescription(saveTypename, info),
                        IsTwoWay = CheckIsTwoWayEventCallback(info),
                        Type = info.PropertyType,
                    };
            }
        }
    }

    private IEnumerable<ApiMethod> getMethods()
    {
        string saveTypename = DocStrings.GetSaveTypename(Type!);

        foreach (var info in Type!.GetMethods(BindingFlags.Instance | BindingFlags.Public | BindingFlags.FlattenHierarchy | BindingFlags.Static).OrderBy(x => x.Name))
        {
            if (!hiddenMethods.Any(x => x.Contains(info.Name)) && !info.Name.StartsWith("get_") && !info.Name.StartsWith("set_"))
            {
                if (info.GetCustomAttributes(typeof(System.ObsoleteAttribute), true).Length == 0)
                {
                    yield return new ApiMethod()
                        {
                            MethodInfo = info,
                            Return = info.ReturnParameter,
                            Signature = info.GetSignature(),
                            Parameters = info.GetParameters(),
                            Documentation = DocStrings.GetMemberDescription(saveTypename, info)
                        };
                }
            }
        }
    }

    private IEnumerable<ApiProperty> getProperties()
    {
        string saveTypename = DocStrings.GetSaveTypename(Type!);

        foreach (var info in Type!.GetPropertyInfosWithAttribute<ParameterAttribute>()
                                 .OrderBy(x => _propertiesGrouping switch
                                 {
                                     Grouping.Categories => x.GetCustomAttribute<CategoryAttribute>()?.Order ?? int.MaxValue - 1,
                                     Grouping.Inheritance => -NumberOfAncestorClasses(BaseDefinitionClass(x)),
                                     _ => 0
                                 })
                                 .ThenBy(x => x.Name))
        {
            if (info.GetCustomAttributes(typeof(System.ObsoleteAttribute), true).Length == 0 && !info.PropertyType.Name.Contains("EventCallback"))
            {
                yield return new ApiProperty()
                    {
                        Name = info.Name,
                        PropertyInfo = info,
                        Default = GetDefaultValue(info),
                        IsTwoWay = CheckIsTwoWayProperty(info),
                        Description = DocStrings.GetMemberDescription(saveTypename, info),
                        Type = info.PropertyType
                    };
            }
        }
    }


    private string AnalyseMethodDocumentation(string documentation, string occurrence, string parameter = "")
    {
        try
        {
            // Define local variable
            string doublequotes = @"""";

            // Define the start tag and the end tag
            string endTag = $"</{occurrence}>";
            string startTag = $"<{occurrence}{(parameter == string.Empty ? "" : " name=" + doublequotes + parameter + doublequotes)}>";

            // Check if the documentation is valid and contains the start tag
            if (documentation != null && documentation.Contains(startTag))
            {
                // Remove the beginning of the documentation until the start tag
                documentation = documentation.Substring(documentation.IndexOf(startTag), documentation.Length - documentation.IndexOf(startTag));

                // Check if the documentation contains the end tag
                if (documentation.Contains(endTag))
                {
                    // Return the extracted information
                    // If the information is not for summary, ' : ' is only added if there is a non-empty information to be returned
                    return (occurrence != "summary" && documentation.Substring(startTag.Length, documentation.IndexOf(endTag) - startTag.Length).Trim() != "" ? " : " : "") +
                        documentation.Substring(startTag.Length, documentation.IndexOf(endTag) - startTag.Length).Trim();
                }
            }
        }
        catch
        {
            // ignored
        }

        return string.Empty;
    }

    private bool CheckIsTwoWayEventCallback(PropertyInfo propertyInfo) => propertyInfo.Name.EndsWith("Changed") ? true : false;

    private bool CheckIsTwoWayProperty(PropertyInfo propertyInfo)
    {
        PropertyInfo eventCallbackInfo = Type!.GetProperty(propertyInfo.Name + "Changed")!;

        return eventCallbackInfo != null &&
               eventCallbackInfo.PropertyType.Name.Contains("EventCallback") &&
               eventCallbackInfo.GetCustomAttribute<ParameterAttribute>() != null &&
               eventCallbackInfo.GetCustomAttribute<ObsoleteAttribute>() == null;
    }

    // used for default value getting
    object? _comp_instance;

    RenderFragment? RenderTheType()
    {
        if (!Type!.IsAssignableTo(typeof(IComponent)))
            return null;
        return new RenderFragment(builder =>
        {
            builder.OpenComponent(0, Type);
            builder.AddComponentReferenceCapture(1, inst => { _comp_instance = inst; });
            builder.CloseComponent();
        });
    }

    private object? GetDefaultValue(PropertyInfo info)
    {
        try
        {
            if (_comp_instance == null)
            {
                RenderTheType();
                return null;
            }
            return info.GetValue(_comp_instance);
        }
        catch (Exception) { }
        return null;
    }

    DefaultConverter<object> _converter = new DefaultConverter<object>() { Culture = CultureInfo.InvariantCulture };

    private string PresentDefaultValue(object @default)
    {
        if (@default == null)
            return "null";
        if (@default.GetType() == typeof(string))
        {
            if (@default.ToString() == string.Empty)
            {
                return "";
            }
            else
            {
                return $"\"{@default}\"";
            }
        }
        if (@default.GetType().IsEnum)
            return $"{@default.GetType().Name}.{@default}";
        if (Nullable.GetUnderlyingType(@default.GetType()) != null)
            return _converter.Set(@default)!;
        if (@default.GetType().IsGenericType) // for instance event callbacks
            return "";
        if (@default.GetType().IsValueType)
            return _converter.Set(@default)!;
        return "";
    }


    #region Grouping properties

    private enum Grouping { Categories, Inheritance, None }

    private Grouping _propertiesGrouping = Grouping.Categories;

    private TableGroupDefinition<ApiProperty>? PropertiesGroupDefinition => _propertiesGrouping switch
    {
        Grouping.Categories => new() { Selector = (p) => p.PropertyInfo?.GetCustomAttribute<CategoryAttribute>()?.Name ?? "Misc" },
        Grouping.Inheritance => new() { Selector = (p) => BaseDefinitionClass(p.PropertyInfo!) },
        _ => null
    };

    // -- Grouping properties by inheritance ------------------------------------------------------------------------------------------

    private static Type BaseDefinitionClass(MethodInfo m) => m.GetBaseDefinition().DeclaringType!;

    private static Type BaseDefinitionClass(PropertyInfo p) => BaseDefinitionClass(p.GetMethod ?? p.SetMethod!);  // used for grouping properties

    private static bool IsOverridden(MethodInfo m) => m.GetBaseDefinition().DeclaringType != m.DeclaringType;

    private static bool IsOverridden(PropertyInfo p) => IsOverridden(p.GetMethod ?? p.SetMethod!);                // used for the "overridden" chip

    // used for ordering groups of properties
    private static int NumberOfAncestorClasses(Type? type)
    {
        int n = 0;
        while ((type = type?.BaseType) != null)
            n++;
        return n;
    }

    #endregion
}
