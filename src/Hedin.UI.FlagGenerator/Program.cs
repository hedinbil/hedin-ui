using System.Globalization;
using System.Text;
using System.Text.RegularExpressions;

// Usage:
// dotnet run --project Hedin.UI.FlagGenerator -- <assetsRoot> <outputDir>
//   assetsRoot: path to Hedin.UI/wwwroot
//   outputDir : folder where Flags.g.cs should be written (e.g., Hedin.UI/Generated)

if (args.Length < 2)
{
    Console.Error.WriteLine("Usage: FlagGenerator <assetsRoot> <outputDir>");
    return 1;
}

var assetsRoot = Path.GetFullPath(args[0]);   // t.ex. .../Hedin.UI.FlagGenerator/assets
var outputDir = Path.GetFullPath(args[1]);   // t.ex. .../Hedin.UI/Generated

var src4x3 = Path.Combine(assetsRoot, "flags", "4x3");
var src1x1 = Path.Combine(assetsRoot, "flags", "1x1");

if (!Directory.Exists(src4x3) && !Directory.Exists(src1x1))
{
    Console.Error.WriteLine($"No flag folders found under: {assetsRoot}/img/flags");
    return 2;
}

Directory.CreateDirectory(outputDir);
var outFile = Path.Combine(outputDir, "Flags.g.cs");

var rxViewBox = new Regex(@"viewBox\s*=\s*['""]([^'""]+)['""]", RegexOptions.IgnoreCase | RegexOptions.Compiled);
var rxOpenSvg = new Regex(@"<svg[^>]*>", RegexOptions.IgnoreCase | RegexOptions.Compiled);
var rxCloseSvg = new Regex(@"</svg\s*>", RegexOptions.IgnoreCase | RegexOptions.Compiled);

static string Sanitize(string s) => s.Replace("\r", "").Replace("\n", "").Replace("\t", " ");
static string Esc(string s) => s.Replace("\\", "\\\\").Replace("\"", "\\\"");
static string NormalizeIdentifier(string raw)
{
    var up = raw.Trim().ToUpperInvariant().Replace('-', '_').Replace(' ', '_');
    var sb = new StringBuilder(up.Length);
    foreach (var ch in up)
    {
        if ((ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9') || ch == '_')
            sb.Append(ch);
    }
    if (sb.Length == 0) return "_";
    if (char.IsDigit(sb[0])) sb.Insert(0, '_');
    return sb.ToString();
}
static string ToCodeKey(string raw)
    => raw.Trim().ToUpperInvariant().Replace("-", "").Replace("_", "");

static string WrapTo24x24(string raw, Regex rxViewBox, Regex rxOpenSvg, Regex rxCloseSvg)
{
    var m = rxViewBox.Match(raw);
    var vb = m.Success ? m.Groups[1].Value : "0 0 640 480";
    var parts = vb.Split(new[] { ' ', ',' }, StringSplitOptions.RemoveEmptyEntries);
    double x = 0, y = 0, w = 640, h = 480;
    if (parts.Length == 4)
    {
        double.TryParse(parts[0], NumberStyles.Float, CultureInfo.InvariantCulture, out x);
        double.TryParse(parts[1], NumberStyles.Float, CultureInfo.InvariantCulture, out y);
        double.TryParse(parts[2], NumberStyles.Float, CultureInfo.InvariantCulture, out w);
        double.TryParse(parts[3], NumberStyles.Float, CultureInfo.InvariantCulture, out h);
    }

    var inner = rxOpenSvg.Replace(raw, "");
    inner = rxCloseSvg.Replace(inner, "");

    const double targetW = 24, targetH = 24;
    var sx = targetW / w; var sy = targetH / h; var s = Math.Min(sx, sy);
    var drawW = w * s; var drawH = h * s;
    var tx = (targetW - drawW) / 2.0; var ty = (targetH - drawH) / 2.0;

    var t = $"translate({tx.ToString(CultureInfo.InvariantCulture)},{ty.ToString(CultureInfo.InvariantCulture)}) " +
            $"scale({s.ToString(CultureInfo.InvariantCulture)})";
    if (Math.Abs(x) > 1e-6 || Math.Abs(y) > 1e-6)
        t += $" translate({(-x).ToString(CultureInfo.InvariantCulture)},{(-y).ToString(CultureInfo.InvariantCulture)})";

    return $"<g transform='{t}'>{inner}</g>";
}

static string[] GetFilesIfExists(string folder)
    => Directory.Exists(folder) ? Directory.GetFiles(folder, "*.svg") : Array.Empty<string>();

var files4x3 = GetFilesIfExists(src4x3);
var files1x1 = GetFilesIfExists(src1x1);


static IEnumerable<FlagItem> MapFiles(IEnumerable<string> paths)
{
    foreach (var p in paths)
    {
        var name = Path.GetFileNameWithoutExtension(p)!;
        var id = NormalizeIdentifier(name);
        var key = ToCodeKey(name);
        yield return new FlagItem(p, id, key);
    }
}

var items4x3 = MapFiles(files4x3).ToArray();
var items1x1 = MapFiles(files1x1).ToArray();

var sb = new StringBuilder();
sb.AppendLine("// <auto-generated/>");
sb.AppendLine("namespace Hedin.UI;");
sb.AppendLine("public static partial class HUIIcons");
sb.AppendLine("{");
sb.AppendLine("    public static partial class Flags");
sb.AppendLine("    {");
sb.AppendLine("        public enum Aspect { FourByThree, OneByOne }");
sb.AppendLine("        public const string Globe = \"<path d='M0 0h24v24H0z' fill='none'/>" +
              "<path d='M12 2a10 10 0 100 20 10 10 0 000-20z'/>\";");

void EmitClass(string className, IEnumerable<FlagItem> items)
{
    sb.AppendLine($"        public static class {className}");
    sb.AppendLine("        {");
    foreach (var item in items
             .GroupBy(i => i.IdName)
             .OrderBy(g => g.Key))
    {
        var path = item.First().FilePath;
        var raw = File.ReadAllText(path, Encoding.UTF8);
        var wrapped = WrapTo24x24(raw, rxViewBox, rxOpenSvg, rxCloseSvg);
        var content = Esc(Sanitize(wrapped));
        sb.AppendLine($"            public const string {item.Key} = \"{content}\";");
    }
    sb.AppendLine("        }");
}

EmitClass("FourByThree", items4x3);
EmitClass("OneByOne", items1x1);

sb.AppendLine("        public static string Get(string? code, Aspect aspect = Aspect.FourByThree)");
sb.AppendLine("        {");
sb.AppendLine("            code = (code ?? string.Empty).Trim().ToUpperInvariant();");
sb.AppendLine("            if (code == \"UK\") code = \"GB\";");
sb.AppendLine("            if (code == \"EL\") code = \"GR\";");
sb.AppendLine("            if (code == \"ENG\") code = \"GB_ENG\";");
sb.AppendLine("            if (code == \"SCT\") code = \"GB_SCT\";");
sb.AppendLine("            if (code == \"WLS\") code = \"GB_WLS\";");
sb.AppendLine("            if (code == \"NIR\") code = \"GB_NIR\";");
sb.AppendLine("            var key = code.Replace(\"-\", \"\").Replace(\"_\", \"\");");
sb.AppendLine("            return aspect == Aspect.OneByOne ? Get1x1(key) : Get4x3(key);");
sb.AppendLine("        }");

sb.AppendLine("        public static string GetFromCulture(string? cultureName, Aspect aspect = Aspect.FourByThree)");
sb.AppendLine("        {");
sb.AppendLine("            if (string.IsNullOrWhiteSpace(cultureName))");
sb.AppendLine("                return Globe;");
sb.AppendLine("            try");
sb.AppendLine("            {");
sb.AppendLine("                var region = new System.Globalization.RegionInfo(cultureName);");
sb.AppendLine("                return Get(region.TwoLetterISORegionName, aspect);");
sb.AppendLine("            }");
sb.AppendLine("            catch");
sb.AppendLine("            {");
sb.AppendLine("                return Globe;");
sb.AppendLine("            }");
sb.AppendLine("        }");

sb.AppendLine("        private static string Get4x3(string key) => key switch");
sb.AppendLine("        {");
foreach (var it in items4x3.DistinctBy(i => i.CodeKey))
{
    sb.AppendLine($"            \"{it.CodeKey}\" => FourByThree.{it.IdName},");
}
sb.AppendLine("            _ => Globe,");
sb.AppendLine("        };");

sb.AppendLine("        private static string Get1x1(string key) => key switch");
sb.AppendLine("        {");
foreach (var it in items1x1.DistinctBy(i => i.CodeKey))
{
    sb.AppendLine($"            \"{it.CodeKey}\" => OneByOne.{it.IdName},");
}
sb.AppendLine("            _ => Globe,");
sb.AppendLine("        };");

foreach (var it in items4x3.DistinctBy(i => i.IdName))
{
    sb.AppendLine($"        public const string {it.IdName} = FourByThree.{it.IdName};");
}

sb.AppendLine("    }");
sb.AppendLine("}");

File.WriteAllText(outFile, sb.ToString(), new UTF8Encoding(false));
Console.WriteLine($"Generated: {outFile}");
return 0;
record FlagItem(string FilePath, string IdName, string CodeKey);
