@namespace Hedin.UI
@using System.Diagnostics
@inherits HUIComponentBase
@inject InternaHUIlLocalizer Localizer
@using Hedin.UI.Extensions.Helpers
@using Hedin.UI.Internal
@typeparam T
@if (ChildContent != null)
{
    <CascadingValue Value="@this" Name="HUIPageTable">
        <HUIModule Header="@Header" IsExpanded="true" ChildContent="ChildContent">
            <Buttons>
                @Buttons
                @if (ShowSearchField)
                {
                    <HUIInputButton AutoFocus="true" Tooltip="@Localizer["HUIPageTable.QuickSearchToolTip"]" Label="@Localizer["HUIPageTable.QuickSearchLabel"]" ValueChanged="OnSearchInput" OnEnterKey="OnSearchInputEnterKey" />
                }
                @if (OnRefreshClick.HasDelegate)
                {
                    <HUIIconButton Tooltip="@Localizer["HUIPageTable.Refresh"]" Loading="isRefreshing" Icon="@Icons.Material.Filled.Autorenew" OnClick="HandleRefreshClick" />
                }
                @if (ShowExportButton)
                {
                    <HUIIconButton Tooltip="@Localizer["HUIPageTable.DownloadAsExcelButton"]" Loading="isExporting" Icon="@Icons.Material.Filled.Download" OnClick="HandleExportClick" />
                }
                @if (DataGrid?.CanSaveAndLoad ?? false)
                {
                    <TableContextMenu T="T" DataGrid="DataGrid"></TableContextMenu>
                }
            </Buttons>
        </HUIModule>
    </CascadingValue>
}

@code {
    /// <summary>
    /// Reference to the data grid component.
    /// Used for coordinating between the page table and data grid.
    /// </summary>
    public HUIDataGrid<T>? DataGrid { get; set; }
    
    /// <summary>
    /// The content to display within the page table.
    /// Typically contains the data grid component.
    /// </summary>
    [Parameter] public RenderFragment? ChildContent { get; set; }
    
    /// <summary>
    /// Event callback when the export button is clicked.
    /// Typically used to export data to Excel or other formats.
    /// </summary>
    [Parameter] public EventCallback OnExportClick { get; set; }
    
    /// <summary>
    /// Header text displayed in the page table module.
    /// Describes the content of the table.
    /// </summary>
    [Parameter] public string Header { get; set; } = "";
    
    /// <summary>
    /// Shows the search field when true.
    /// Enables quick search functionality for the table data.
    /// </summary>
    [Parameter] public bool ShowSearchField { get; set; } = true;
    
    /// <summary>
    /// Shows the export button when true.
    /// Enables data export functionality.
    /// </summary>
    [Parameter] public bool ShowExportButton { get; set; } = true;
    
    /// <summary>
    /// Event callback when search input changes.
    /// Provides the current search text for filtering.
    /// </summary>
    [Parameter] public EventCallback<string?> OnSearchInput { get; set; }
    
    /// <summary>
    /// Event callback when Enter key is pressed in search field.
    /// Typically used to trigger immediate search.
    /// </summary>
    [Parameter] public EventCallback<string?> OnSearchInputEnterKey { get; set; }
    
    /// <summary>
    /// Custom buttons to display in the page table header.
    /// Typically used for additional table actions or controls.
    /// </summary>
    [Parameter] public RenderFragment? Buttons { get; set; }

    /// <summary>
    /// EventCallback to the refresh button click. The refresh button will be visible only when this parameter is set.
    /// </summary>
    [Parameter] public EventCallback OnRefreshClick { get; set; }

    private string searchString = "";
    private bool showSearchField = false;
    private bool isExporting = false;
    private bool isRefreshing = false;

    private async Task HandleExportClick()
    {
        isExporting = true;
        await OnExportClick.InvokeDelayedAsync(500);
        isExporting = false;
        StateHasChanged();
    }
    private async void HandleRefreshClick()
    {
        isRefreshing = true;
        await OnRefreshClick.InvokeDelayedAsync(500);
        isRefreshing = false;
        StateHasChanged();
    }
    private void HandleSearchClick() => showSearchField = true;
    private void HandleSearchDebounce() => OnSearchInput.InvokeAsync(searchString);
    private void HandleSearchCancelClick()
    {
        searchString = "";
        OnSearchInput.InvokeAsync(null);
        showSearchField = false;
    }

    private void HandleSearchKeyUp(KeyboardEventArgs args)
    {
        if (args.Code == "Escape") HandleSearchCancelClick();
        if (args.Code == "Enter") OnSearchInputEnterKey.InvokeAsync(searchString);
    }
}
