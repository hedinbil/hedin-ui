@namespace Hedin.UI
@inject NavigationManager NavigationManager
@inject HUILocalizer Localizer
@using Microsoft.AspNetCore.Components.Authorization

@if (Items.Any())
{
    <div class="tabs-wrapper">
        <MudTabs ActivePanelIndex="GetActiveTabIndex()" Elevation="0" Color="Color.Transparent" Rounded="true" MinimumTabWidth="32px" HideSlider="true">
            @foreach (var menuItem in Items)
            {
                <AuthorizeView Policy="@menuItem.Policy">
                    <Authorized>
                        @RenderPanel(menuItem)
                    </Authorized>
                    <NotAuthorized>
                        @if (!RequireAuthorization)
                        {
                            @RenderPanel(menuItem)
                        }
                    </NotAuthorized>
                </AuthorizeView>
            }
        </MudTabs>
    </div>
}

@code {
    /// <summary>
    /// Collection of menu items to display in the horizontal navigation tabs.
    /// Each item represents a tab in the horizontal navigation.
    /// </summary>
    [Parameter] public List<HUIMenuItem> Items { get; set; } = new();

    /// <summary>
    /// Programmatically sets the active tab index. Which UI wise means that the tab will be selected.
    /// If this is set during initialization, the tab will be selected when the component is rendered.
    /// </summary>
    [Parameter] public HUIMenuItem? ActiveItem { get; set; }
    
    /// <summary>
    /// Controls whether authorization is required to view menu items.
    /// When false, all menu items are shown regardless of user authorization.
    /// </summary>
    [Parameter] public bool RequireAuthorization { get; set; } = true;
 
    private int GetActiveTabIndex()
    {
        if (ActiveItem == null)
        {
            return -1;
        }

        return Items.IndexOf(ActiveItem);
    }

    private void HandleOnTabClick(HUIMenuItem menuItem)
    {
        var targetRelativePath = menuItem.Url?.Trim().TrimEnd('/');
        if (string.IsNullOrWhiteSpace(targetRelativePath))
        {
            return;
        }

        var currentUri = NavigationManager.Uri.TrimEnd('/');
        var targetUri = NavigationManager.ToAbsoluteUri(targetRelativePath).ToString();

        if (TargetIsSameAsCurrent(targetUri, currentUri))
        {
            // Do not navigate (push browser history) if the tab hasn't changed
            return;
        }

        NavigationManager.NavigateTo(targetRelativePath);
    }

    private static bool TargetIsSameAsCurrent(string targetUri, string currentUri)
    {
        return string.Equals(targetUri, currentUri, StringComparison.Ordinal);
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private RenderFragment RenderPanel(HUIMenuItem menuItem)
    {
        return @<MudTabPanel
                    Class="px-6"
                    Disabled="menuItem.Disabled"
                    OnClick="() => HandleOnTabClick(menuItem)"
                    ToolTip="@menuItem.Tooltip"
                    Icon="@menuItem.Icon">
                    <TabContent>
                        <MudStack Spacing="2" Row Justify="Justify.Center" AlignItems="AlignItems.Center">
                            @if(!string.IsNullOrWhiteSpace(menuItem.Icon))
                            {
                                <MudIcon Icon="@menuItem.Icon" Size="Size.Small"/>
                            }
                            @Localizer[menuItem.DisplayName]
                            @RenderBadge(menuItem)
                        </MudStack>
                    </TabContent>
               </MudTabPanel>;
    }
    
    /// <summary>
    /// Calls StateHasChanged on the component
    /// </summary>
    public void ForceStateHasChanged()
    {
        StateHasChanged();
    }
}
@code {
    private RenderFragment? RenderBadge(HUIMenuItem menuItem)
    {
        if (menuItem.Dot != null)
        {
            return @<HUIStatusChip Severity="@menuItem.Dot.Value" />;
        }
        if (menuItem.BadgeData != null)
        {
            return @<MudChip T="string" Color="@menuItem.BadgeColor" Size="Size.Small">@menuItem.BadgeData</MudChip>;
        }

        return null;
    }
}
