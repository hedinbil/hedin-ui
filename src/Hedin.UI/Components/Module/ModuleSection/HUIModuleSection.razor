@namespace Hedin.UI

<div class="d-flex hui-module-section cursor-pointer my-3" @onclick="HandleToggleClick">
    @if (!string.IsNullOrEmpty(Header))
    {
        <MudText Typo="Typo.caption" Style="white-space:nowrap" Class="mud-text-secondary">@Header</MudText>
        <span class="hui-module-section-caption-line"></span>
        @if (IsExpanded || ShowButtons)
        {
            @Buttons
        }
        <MudIconButton Class="my-n1" Icon="@(IsExpanded ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)" Size="Size.Small" OnClick="HandleToggleClick"></MudIconButton>
    }
</div>

@if (IsExpanded)
{
    <section>
        @ChildContent
    </section>
}

@code {
    /// <summary>
    /// Text displayed as the section header.
    /// When empty, the section header is not shown.
    /// </summary>
    [Parameter] public string? Header { get; set; }
    
    /// <summary>
    /// The content to display within the expandable section.
    /// Renders when the section is expanded.
    /// </summary>
    [Parameter] public RenderFragment? ChildContent { get; set; }
    
    /// <summary>
    /// Buttons are per default shown only when section is expanded
    /// </summary>
    [Parameter] public RenderFragment? Buttons { get; set; }
    
    /// <summary>
    /// Controls whether the section is expanded or collapsed.
    /// Determines the visibility of the section content.
    /// </summary>
    [Parameter] public bool IsExpanded { get; set; } = true;
    
    /// <summary>
    /// Event callback when the expansion state changes.
    /// Provides the new expansion state.
    /// </summary>
    [Parameter] public EventCallback<bool> IsExpandedChanged { get; set; }
    
    /// <summary>
    /// Overridable, to show buttons even if the section is collapsed
    /// </summary>
    [Parameter] public bool ShowButtons { get; set; }



    private void HandleToggleClick(){
        IsExpanded = !IsExpanded;
        IsExpandedChanged.InvokeAsync(IsExpanded);
    }
}
