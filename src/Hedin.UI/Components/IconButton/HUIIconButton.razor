@namespace Hedin.UI

<HUITooltip PointerEvents="@TooltipPointerEvents" Text="@Tooltip">
    <MudIconButton Target="@Target" Size="Size.Small" Variant="Variant" Icon="@(!Loading ? Icon : null)" OnClick="@OnClick" Disabled="Loading || Disabled" Color="Color" DropShadow="false" Href="@Href" Style="@MergedStyle">
        @if (Loading)
        {
            <MudProgressCircular Class="mt-1" Color="Color.Info" Size="Size.Small" Indeterminate="true" />
        }
    </MudIconButton>
</HUITooltip>

@code {
    /// <summary>
    /// Cascading parameter that indicates if the button is part of a grouped set.
    /// Affects styling and spacing when multiple buttons are grouped together.
    /// </summary>
    [CascadingParameter(Name = "GroupedMode")] public bool Grouped { get; set; }
    
    /// <summary>
    /// Cascading parameter that provides styling from the parent column.
    /// Used for consistent styling across grouped buttons.
    /// </summary>
    [CascadingParameter] public string? StyleFromColumn { get; set; }
    
    /// <summary>
    /// Shows a progress icon when Loading is true
    /// </summary>
    [Parameter] public bool Loading { get; set; }
    
    /// <summary>
    /// Text displayed in the tooltip when hovering over the button.
    /// Provides additional context or description for the button action.
    /// </summary>
    [Parameter] public string? Tooltip { get; set; }
    
    /// <summary>
    /// The color theme of the button.
    /// Affects the visual appearance and styling.
    /// </summary>
    [Parameter] public Color Color { get; set; } = Color.Default;
    
    /// <summary>
    /// The visual style variant of the button.
    /// Determines the button's appearance (outlined, filled, text, etc.).
    /// </summary>
    [Parameter] public Variant Variant { get; set; } = Variant.Outlined;
    
    /// <summary>
    /// The Material Design icon to display on the button.
    /// Should be a valid Material Icons name.
    /// </summary>
    [Parameter] public string? Icon { get; set; }
    
    /// <summary>
    /// The URL to navigate to when the button is clicked.
    /// <remarks>Defaults to null. When clicked, the browser will navigate to this URL. Use the Target property to target a specific tab.</remarks> 
    /// </summary>
    [Parameter] public string? Href { get; set; }
    
    /// <summary>
    /// Event callback when the button is clicked.
    /// Invoked when the user clicks the button.
    /// </summary>
    [Parameter] public EventCallback OnClick { get; set; }
    
    /// <summary>
    /// Disables the button when true.
    /// Prevents user interaction and shows disabled styling.
    /// </summary>
    [Parameter] public bool Disabled { get; set; }
    
    /// <summary>
    /// Custom CSS styles applied to the button.
    /// Merged with other style sources for final styling.
    /// </summary>
    [Parameter] public string Style { get; set; }
    
    /// <summary>
    /// The target for navigation when Href is provided.
    /// Specifies where the link should open (e.g., "_blank" for new tab).
    /// </summary>
    [Parameter] public string Target { get; set; }
    
    /// <summary>
    /// Set the pointer events CSS property on the tooltip. auto is the default value.
    /// Suitable values are "none", "auto", "visible", "visibleFill", "visiblePainted", and "visibleStroke".
    /// </summary>
    [Parameter] public string TooltipPointerEvents { get; set; } = "auto";

    /// <summary>
    /// Merges styles from multiple sources for consistent button appearance.
    /// Combines column styles, grouped styles, and custom styles.
    /// </summary>
    private string MergedStyle => $"{(Grouped ? $"{StyleFromColumn} {GroupedStyle}" : StyleFromColumn)} {Style}".Trim();
    
    /// <summary>
    /// Default styling for grouped buttons.
    /// Provides consistent spacing and margins for grouped button sets.
    /// </summary>
    private const string GroupedStyle = "margin-left: -6px; margin-right: -6px; padding-left: 12px; padding-right: 12px;";
}