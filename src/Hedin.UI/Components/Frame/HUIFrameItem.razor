@using System.Globalization
@namespace Hedin.UI
@if (CanBeEdited)
{
    <div class="@($"d-flex flex-column hui-frame-item hui-input-table-grid {primaryClass} {GetWidthClass()}")">
        <div class="@($"hui-input-table-grid {primaryClassEditMode} {(Locked || Warning ? "hui-input-table-grid-icons" : null)}")" @onfocusout="CloseEditComponent">
            @ChildContent
            @if (Locked || Warning)
            {
                <div class="hui-frame-item-icons">
                    @if (Warning)
                    {
                        if(!string.IsNullOrEmpty(WarningText)){
                            <HUITooltip Text="@WarningText" >
                                <MudIcon Icon="@Icons.Material.Filled.Warning" Size="Size.Small" Color="Color.Warning" />
                            </HUITooltip>
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Warning" Size="Size.Small" Color="Color.Warning" />
                        }
                    }
                    @if (Locked)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Lock" Size="Size.Small" Color="Color.Default" />
                    }

                </div>
            }
        </div>
        
    </div>
}
else
{
    <div class="@($"pa-3 d-flex flex-column hui-frame-item {primaryClass} {GetWidthClass()}")">
        <span class="d-flex justify-space-between">
            <MudText Class="@($"hui-text-xs mb-1 {primaryClassText}")">@Label</MudText>
        </span>

        @if (ValueContent is null)
        {
            <MudText Class="hui-text-semibold">@(!string.IsNullOrEmpty(Value) ? Value : "–")</MudText>
        }
        else
        {
            @ValueContent
        }
    </div>
}

@code {
    /// <summary>
    /// Determines if the frame item can be edited.
    /// When true, shows edit mode; when false, shows read-only mode.
    /// </summary>
    [Parameter] public bool CanBeEdited { get; set; }
    
    /// <summary>
    /// Text label displayed above the value.
    /// Describes what the frame item represents.
    /// </summary>
    [Parameter] public string Label { get; set; }
    
    /// <summary>
    /// Text value displayed in the frame item.
    /// Shown when ValueContent is not provided.
    /// </summary>
    [Parameter] public string Value { get; set; }
    
    /// <summary>
    /// Applies primary theme styling when true.
    /// Affects colors and visual emphasis.
    /// </summary>
    [Parameter] public bool Primary { get; set; }
    
    /// <summary>
    /// Shows a warning icon when true.
    /// Indicates potential issues or attention needed.
    /// </summary>
    [Parameter] public bool Warning { get; set; }
    
    /// <summary>
    /// Custom warning text displayed in tooltip.
    /// Provides additional context for the warning state.
    /// </summary>
    [Parameter] public string? WarningText { get; set; }
    
    /// <summary>
    /// Shows a lock icon when true.
    /// Indicates the item is locked or read-only.
    /// </summary>
    [Parameter] public bool Locked { get; set; }
    
    /// <summary>
    /// Width of the frame item as a percentage.
    /// Controls the grid column span and sizing behavior.
    /// Supported values: 25, 50, 75, 100
    /// </summary>
    [Parameter] public string Width { get; set; }
    
    /// <summary>
    /// Content displayed in edit mode.
    /// Renders when CanBeEdited is true.
    /// </summary>
    [Parameter] public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// Use this to override the default value content.
    /// Customizes how the value is displayed in read-only mode.
    /// </summary>
    [Parameter] public RenderFragment ValueContent { get; set; } 

    private string primaryClass => Primary ? "mud-theme-primary mud-primary-text" : "mud-background";
    private string primaryClassText => Primary ? "" : "mud-text-secondary";
    private string primaryClassEditMode => Primary ? "primary-edit-mode" : "";
    
    private string GetWidthClass()
    {
        if (string.IsNullOrEmpty(Width)) return "";
        
        var widthValue = double.Parse(Width, CultureInfo.InvariantCulture);
        return widthValue switch
        {
            25 => "hui-frame-item-width-25",
            50 => "hui-frame-item-width-50", 
            75 => "hui-frame-item-width-75",
            100 => "hui-frame-item-width-100",
            _ => ""
        };
    }

    private bool _isEditing;

    private void CloseEditComponent()
    {
        _isEditing = false;
    }
}
